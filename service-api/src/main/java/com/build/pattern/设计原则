1:找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起;
2:针对接口编程，而不是针对实现编程
3:多用组合，少用继承
4:为了交互对象之间的松耦合设计而努力
5:类应该对扩展开放，对修改关闭



策略模式:定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户
观察者模式:定义了对象之间一对多的依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新
装饰者模式:动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案
工厂模式：(1)简单工厂
	(2)工厂方法模式 定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类
	(3)抽象工厂模式 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类
单件模式：确保一个类只有一个实例，并提供一个全局访问点
命令模式：

Reactor:模式

skeletal:骨架实现
strategy:策略
template method: 模版方法